(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{169:function(e,s,t){"use strict";t.r(s);var r=t(0),n=Object(r.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("div",{staticClass:"content"},[e._m(0),e._v(" "),t("p",[e._v("既然 Docker 是一款实用软件，我们就不得不先从它的安装说起，只有让 Docker 运行在我们的计算机上，才能更方便我们对 Docker 相关知识和使用方式的学习。得益于与商业性的优雅结合，Docker 背后拥有大量的优秀开发者为其提供技术支持，而这个优势所造就的结果之一，就是 Docker 拥有丰富且完善的安装体系，我们可以很轻松的通过多种方式安装和运行 Docker。")]),e._v(" "),e._m(1),e._v(" "),t("p",[e._v("由于 Docker 容器实现本身就采用了 Linux 内核中很多的特性，所以它自然与 Linux 系统亲密性很高，所以我们可以很轻松的将 Docker Engine 安装在 Linux 系统中。")]),e._v(" "),t("p",[e._v("不过，在安装之前，我还得不厌其烦的啰嗦一些基本概念，让大家在安装 Docker 时能够更好的进行选择。掌握这些概念，能够帮助大家理解一些安装流程中操作的目的，不至于总是一味的进行“下一步”式安装。")]),e._v(" "),e._m(2),e._v(" "),t("p",[e._v("在安装 Docker 之前，我们先来了解一下 Docker 的版本定义，这有利于我们在之后的开发中选择和使用合适的 Docker 版本。")]),e._v(" "),t("p",[e._v("对于 Docker Engine 来说，其主要分为两个系列：")]),e._v(" "),e._m(3),e._v(" "),t("p",[e._v("社区版 ( Docker Engine CE ) 主要提供了 Docker 中的容器管理等基础功能，主要针对开发者和小型团队进行开发和试验。而企业版 ( Docker Engine EE ) 则在社区版的基础上增加了诸如容器管理、镜像管理、插件、安全等额外服务与功能，为容器的稳定运行提供了支持，适合于中大型项目的线上运行。")]),e._v(" "),e._m(4),e._v(" "),t("p",[e._v("社区版和企业版的另一区别就是免费与收费了。对于我们开发者来说，社区版已经提供了 Docker 所有核心的功能，足够满足我们在开发、测试中的需求，所以我们直接选择使用社区版进行开发即可。在这本小册中，所有的内容也是围绕着社区版的 Docker Engine 展开的。")]),e._v(" "),t("p",[e._v("从另外一个角度，Docker Engine 的迭代版本又会分为稳定版 ( Stable release ) 和预览版 ( Edge release )。不论是稳定版还是预览版，它们都会以发布时的年月来命名版本号，例如如 17 年 3 月的版本，版本号就是 17.03。")]),e._v(" "),e._m(5),e._v(" "),t("p",[e._v("Docker Engine 的稳定版固定为每三个月更新一次，而预览版则每月都会更新。在预览版中可以及时掌握到最新的功能特性，不过这对于我们仅是使用 Docker 的开发者来说，意义并不是特别重大的，所以我还是更推荐安装更有保障的稳定版本。")]),e._v(" "),t("p",[e._v("在主要版本之外，Docker 官方也以解决 Bug 为主要目的，不定期发布次要版本。次要版本的版本号由主要版本和发布序号组成，如：17.03.2 就是对 17.03 版本的第二次修正。")]),e._v(" "),e._m(6),e._v(" "),t("p",[e._v("由于 Docker 的容器隔离依赖于 Linux 内核中的相关支持，所以使用 Docker 首先需要确保安装机器的 Linux kernel 中包含 Docker 所需要使用的特性。以目前 Docker 官方主要维护的版本为例，我们需要使用基于 Linux kernel 3.10 以上版本的 Linux 系统来安装 Docker。")]),e._v(" "),t("p",[e._v("也许 Linux kernel 的版本还不够直观，下面的表格就直接展示了 Docker 对主流几款 Linux 系统版本的要求。")]),e._v(" "),t("p",[e._v("操作系统")]),e._v(" "),t("p",[e._v("支持的系统版本")]),e._v(" "),t("p",[e._v("CentOS")]),e._v(" "),t("p",[e._v("CentOS 7")]),e._v(" "),t("p",[e._v("Debian")]),e._v(" "),e._m(7),e._v(" "),t("p",[e._v("Fedora")]),e._v(" "),e._m(8),e._v(" "),t("p",[e._v("Ubuntu")]),e._v(" "),e._m(9),e._v(" "),t("p",[e._v("当然，在较低版本的 Linux 系统中也能安装 Docker，不过只能是版本较低的 Docker，其功能存在一些缺失，或者与最新版本有所区别。在这本小册里，我们主要以较新版本的 Docker 功能和操作作为介绍，所以如果条件允许，建议将系统升级到支持最新版本 Docker 的系统版本。")]),e._v(" "),e._m(10),e._v(" "),t("p",[e._v("因为 Docker 本身就基于 Linux 的核心能力，同时目前主流的 Linux 系统中所拥有的软件包管理程序，已经可以很轻松的帮助我们处理各种依赖问题，所以在 Linux 中安装 Docker 并非什么难事。")]),e._v(" "),t("p",[e._v("更多的细节就不多说了，Docker 已经为我们准备了好了各系统的安装包，毕竟安装 Docker 并不是我们所要掌握的重点，所以这里我就直接给出安装的命令了。")]),e._v(" "),e._m(11),e._v(" "),e._m(12),e._m(13),e._v(" "),e._m(14),e._m(15),e._v(" "),e._m(16),e._m(17),e._v(" "),e._m(18),e._m(19),e._v(" "),t("p",[e._v("在安装 Docker 完成之后，我们需要先启动 docker daemon 使其能够为我们提供 Docker 服务，这样我们才能正常使用 Docker。")]),e._v(" "),e._m(20),e._v(" "),e._m(21),t("p",[e._v("当然，为了实现 Docker 服务开机自启动，我们还可以运行这个命令：")]),e._v(" "),e._m(22),e._m(23),e._v(" "),e._m(24),e._v(" "),e._m(25),t("p",[e._v("这个命令能够显示 Docker C/S 结构中的服务端 ( docker daemon ) 和客户端 ( docker CLI ) 相关的版本信息。在默认情况下，docker CLI 连接的是本机运行的 docker daemon ，由于 docker daemon 和 docker CLI 通过 RESTful 接口进行了解耦，所以我们也能修改配置用于操作其他机器上运行的 docker daemon 。")]),e._v(" "),e._m(26),e._v(" "),e._m(27),e._v(" "),e._m(28),e._m(29),e._v(" "),e._m(30),e._v(" "),t("p",[e._v("在很多编程语言中，为了更好的向大家提供依赖包的管理，通常都会有一些组织研发相应的包管理工具，例如 Java 的 Maven，PHP 的 Composer，Node.js 的 NPM 等等。而这些管理工具背后，也对应着一个默认的依赖包仓库。")]),e._v(" "),t("p",[e._v("由于众所周知的原因，我们直接连接这些位于国外服务器上的仓库去获取依赖包速度是非常慢的，这时候我们通常会采用国内一些组织或开发者贡献的国内镜像仓库 ( 注意，这里的“镜像”是指复制于国外源的意思，而不是 Docker 里的镜像 )。")]),e._v(" "),t("p",[e._v("在 Docker 中也有一个由官方提供的中央镜像仓库，不过，它与之前我们所说的国外依赖包仓库一样，除了慢的可怜以外，还经常莫名其妙的完全无法访问。")]),e._v(" "),t("p",[e._v("为了解决这个问题，我们最佳的方式依旧是在国内找一个镜像仓库的镜像源进行替换。很感谢 DaoCloud、阿里云等企业的支持，在国内我们可以找到许多镜像源。这里我们给出一个由 Docker 官方提供的国内镜像源：")]),e._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"https://registry.docker-cn.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://registry.docker-cn.com"),t("OutboundLink")],1)])]),e._v(" "),e._m(31),e._v(" "),t("p",[e._v("那么有了地址，我们要如何将其配置到 Docker 中呢？")]),e._v(" "),e._m(32),e._v(" "),e._m(33),t("p",[e._v("在修改之后，别忘了重新启动 docker daemon 来让配置生效哟：")]),e._v(" "),e._m(34),e._m(35),e._v(" "),e._m(36),t("p",[e._v("对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。")]),e._v(" "),e._m(37),e._v(" "),t("p",[e._v("在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。")]),e._v(" "),t("p",[e._v("如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。")]),e._v(" "),t("p",[e._v("Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。")]),e._v(" "),t("p",[e._v("Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。")]),e._v(" "),e._m(38),e._v(" "),t("p",[e._v("在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。")]),e._v(" "),t("p",[e._v("对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：")]),e._v(" "),e._m(39),e._v(" "),t("p",[e._v("对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：")]),e._v(" "),e._m(40),e._v(" "),t("p",[e._v("另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。")]),e._v(" "),t("p",[e._v("在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://store.docker.com/editions/community/docker-ce-desktop-windows",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker for Windows"),t("OutboundLink")],1),e._v(" ( "),t("a",{attrs:{href:"https://store.docker.com/editions/community/docker-ce-desktop-windows",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://store.docker.com/editions/community/docker-ce-desktop-windows"),t("OutboundLink")],1),e._v(" )")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://store.docker.com/editions/community/docker-ce-desktop-mac",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker for Mac"),t("OutboundLink")],1),e._v(" ( "),t("a",{attrs:{href:"https://store.docker.com/editions/community/docker-ce-desktop-mac",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://store.docker.com/editions/community/docker-ce-desktop-mac"),t("OutboundLink")],1),e._v(" )")])]),e._v(" "),t("p",[e._v("安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。")]),e._v(" "),e._m(41),e._v(" "),t("p",[e._v("像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。")]),e._v(" "),t("p",[e._v("启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。")]),e._v(" "),t("p",[e._v("打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。")]),e._v(" "),e._m(42),e._v(" "),t("p",[e._v("Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。")]),e._v(" "),e._m(43),e._v(" "),e._m(44),e._v(" "),e._m(45),e._m(46),e._v(" "),t("p",[e._v("通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？")]),e._v(" "),t("p",[e._v("其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。")]),e._v(" "),t("p",[e._v("由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。")]),e._v(" "),t("p",[e._v("Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。")]),e._v(" "),e._m(47),e._v(" "),t("p",[e._v("除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。")]),e._v(" "),t("p",[e._v("实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。")]),e._v(" "),t("p",[e._v("这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。")]),e._v(" "),e._m(48),e._v(" "),t("p",[e._v("控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。")]),e._v(" "),t("p",[e._v("之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。")]),e._v(" "),t("p",[e._v("当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。")]),e._v(" "),t("p",[e._v("要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。")]),e._v(" "),e._m(49),e._v(" "),t("p",[e._v("Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。")]),e._v(" "),e._m(50),e._v(" "),t("p",[e._v("在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。")]),e._v(" "),t("p",[e._v("我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。")]),e._v(" "),t("p",[e._v("打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。")]),e._v(" "),e._m(51),e._v(" "),t("p",[e._v("Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。")]),e._v(" "),t("p",[e._v("我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：")]),e._v(" "),e._m(52),e._v(" "),t("p",[e._v("在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。")]),e._v(" "),e._m(53),e._v(" "),t("p",[e._v("在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。")]),e._v(" "),e._m(54),e._v(" "),t("p",[e._v("在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。")]),e._v(" "),e._m(55),e._v(" "),t("p",[e._v("在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。")]),e._v(" "),t("p",[e._v("我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。")]),e._v(" "),e._m(56),e._v(" "),t("p",[e._v("Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。")]),e._v(" "),t("p",[e._v("首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。")]),e._v(" "),t("p",[e._v("既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。")]),e._v(" "),e._m(57),e._v(" "),t("p",[e._v("Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。")]),e._v(" "),t("p",[e._v("安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://download.docker.com/win/stable/DockerToolbox.exe",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Toolbox for Windows"),t("OutboundLink")],1),e._v(" ( "),t("a",{attrs:{href:"https://download.docker.com/win/stable/DockerToolbox.exe",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://download.docker.com/win/stable/DockerToolbox.exe"),t("OutboundLink")],1),e._v(" )")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://download.docker.com/mac/stable/DockerToolbox.pkg",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Toolbox for Mac"),t("OutboundLink")],1),e._v(" ( "),t("a",{attrs:{href:"https://download.docker.com/mac/stable/DockerToolbox.pkg",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://download.docker.com/mac/stable/DockerToolbox.pkg"),t("OutboundLink")],1),e._v(" )")])]),e._v(" "),t("p",[e._v("安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。")]),e._v(" "),t("p",[e._v("由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。")]),e._v(" "),t("p",[e._v("另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。")])])}),[function(){var e=this.$createElement,s=this._self._c||e;return s("h1",{attrs:{id:"一、搭建-docker-运行环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、搭建-docker-运行环境"}},[this._v("#")]),this._v(" 一、搭建 Docker 运行环境")])},function(){var e=this.$createElement,s=this._self._c||e;return s("h2",{attrs:{id:"安装前的准备"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装前的准备"}},[this._v("#")]),this._v(" 安装前的准备")])},function(){var e=this.$createElement,s=this._self._c||e;return s("h3",{attrs:{id:"docker-engine-的版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-engine-的版本"}},[this._v("#")]),this._v(" Docker Engine 的版本")])},function(){var e=this.$createElement,s=this._self._c||e;return s("ul",[s("li",[this._v("社区版 ( CE, Community Edition )")]),this._v(" "),s("li",[this._v("企业版 ( EE, Enterprise Edition )")])])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/29/16586347c98cc591?w=2022&h=276&f=png&s=40439",alt:""}})])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/29/165863f7df36e81f?w=914&h=200&f=png&s=43434",alt:""}})])},function(){var e=this.$createElement,s=this._self._c||e;return s("h3",{attrs:{id:"docker-的环境依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-的环境依赖"}},[this._v("#")]),this._v(" Docker 的环境依赖")])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[this._v("Debian Wheezy 7.7 (LTS)"),s("br"),this._v("\nDebian Jessie 8 (LTS)"),s("br"),this._v("\nDebian Stretch 9"),s("br"),this._v("\nDebian Buster 10")])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[this._v("Fedora 26"),s("br"),this._v("\nFedora 27")])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[this._v("Ubuntu Trusty 14.04 (LTS)"),s("br"),this._v("\nUbuntu Xenial 16.04 (LTS)"),s("br"),this._v("\nUbuntu Artful 17.10")])},function(){var e=this.$createElement,s=this._self._c||e;return s("h2",{attrs:{id:"在-linux-系统中安装-docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-linux-系统中安装-docker"}},[this._v("#")]),this._v(" 在 Linux 系统中安装 Docker")])},function(){var e=this.$createElement,s=this._self._c||e;return s("h3",{attrs:{id:"centos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#centos"}},[this._v("#")]),this._v(" CentOS")])},function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ sudo yum install yum-utils device-mapper-persistent-data lvm2\n$\n$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n$ sudo yum install docker-ce\n$\n$ sudo systemctl enable docker\n$ sudo systemctl start docker\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])])},function(){var e=this.$createElement,s=this._self._c||e;return s("h3",{attrs:{id:"debian"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#debian"}},[this._v("#")]),this._v(" Debian")])},function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('$ sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common\n$\n$ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -\n$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"\n$ sudo apt-get update\n$ sudo apt-get install docker-ce\n$\n$ sudo systemctl enable docker\n$ sudo systemctl start docker\n\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])])},function(){var e=this.$createElement,s=this._self._c||e;return s("h3",{attrs:{id:"fedora"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fedora"}},[this._v("#")]),this._v(" Fedora")])},function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ sudo dnf -y install dnf-plugins-core\n$\n$ sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo\n$ sudo dnf install docker-ce\n$\n$ sudo systemctl enable docker\n$ sudo systemctl start docker\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])])},function(){var e=this.$createElement,s=this._self._c||e;return s("h3",{attrs:{id:"ubuntu"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu"}},[this._v("#")]),this._v(" Ubuntu")])},function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('$ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n$\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"\n$ sudo apt-get update\n$ sudo apt-get install docker-ce\n$\n$ sudo systemctl enable docker\n$ sudo systemctl start docker\n\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])])},function(){var e=this.$createElement,s=this._self._c||e;return s("h2",{attrs:{id:"上手使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#上手使用"}},[this._v("#")]),this._v(" 上手使用")])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[this._v("在我们通过软件包的形式安装 Docker Engine 时，安装包已经为我们在 Linux 系统中注册了一个 Docker 服务，所以我们不需要直接启动 docker daemon 对应的 "),s("code",[this._v("dockerd")]),this._v(" 这个程序，而是直接启动 Docker 服务即可。启动的 Docker 服务的命令其实我已经包含在了前面谈到的安装命令中，也就是：")])},function(){var e=this.$createElement,s=this._self._c||e;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ sudo systemctl start docker\n\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br")])])},function(){var e=this.$createElement,s=this._self._c||e;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ sudo systemctl enable docker\n\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br")])])},function(){var e=this.$createElement,s=this._self._c||e;return s("h3",{attrs:{id:"docker-version"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-version"}},[this._v("#")]),this._v(" docker version")])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[this._v("在 Docker 服务启动之后，我们先来尝试一个最简单的查看 Docker 版本的命令："),s("code",[this._v("docker version")]),this._v("。")])},function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ sudo docker version\nClient:\n Version:           18.06.1-ce\n API version:       1.38\n Go version:        go1.10.3\n Git commit:        e68fc7a\n Built:             Tue Aug 21 17:23:03 2018\n OS/Arch:           linux/amd64\n Experimental:      false\n\nServer:\n Engine:\n  Version:          18.06.1-ce\n  API version:      1.38 (minimum version 1.12)\n  Go version:       go1.10.3\n  Git commit:       e68fc7a\n  Built:            Tue Aug 21 17:25:29 2018\n  OS/Arch:          linux/amd64\n  Experimental:     false\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br")])])},function(){var e=this.$createElement,s=this._self._c||e;return s("h3",{attrs:{id:"docker-info"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-info"}},[this._v("#")]),this._v(" docker info")])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[this._v("如果想要了解 Docker Engine 更多相关的信息，我们还可以通过 "),s("code",[this._v("docker info")]),this._v(" 这个命令。")])},function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ sudo docker info\nContainers: 0\n Running: 0\n Paused: 0\n Stopped: 0\nImages: 0\nServer Version: 18.06.0-ce\nStorage Driver: overlay2\n Backing Filesystem: extfs\n Supports d_type: true\n Native Overlay Diff: true\nLogging Driver: json-file\nCgroup Driver: cgroupfs\n## ......\nLive Restore Enabled: false\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br")])])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[this._v("在 "),s("code",[this._v("docker info")]),this._v(" 这条命令的结果中，我们可以看到正在运行的 Docker Engine 实例中运行的容器数量，存储的引擎等等信息。由于命令结果比较多，这里我省略了大部分内容，大家可以自己操作来尝试获得完整的信息。在之后的章节里，较多结果的命令我也会省去一些与讲解内容无关的部分，节约大家阅读的时间并强化重点。")])},function(){var e=this.$createElement,s=this._self._c||e;return s("h3",{attrs:{id:"配置国内镜像源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置国内镜像源"}},[this._v("#")]),this._v(" 配置国内镜像源")])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[s("em",[this._v("( 注：部分读者反映配置了这个镜像源无效，大家需要注意此地址的协议是 https，不要搞错哟 )")])])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[this._v("在 Linux 环境下，我们可以通过修改 "),s("code",[this._v("/etc/docker/daemon.json")]),this._v(" ( 如果文件不存在，你可以直接创建它 ) 这个 Docker 服务的配置文件达到效果。")])},function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "registry-mirrors": [\n        "https://registry.docker-cn.com"\n    ]\n}\n\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])])},function(){var e=this.$createElement,s=this._self._c||e;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ sudo systemctl restart docker\n\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br")])])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[this._v("要验证我们配置的镜像源是否生效，我们可以通过 "),s("code",[this._v("docker info")]),this._v(" 来查阅当前注册的镜像源列表。")])},function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ sudo docker info\n## ......\nRegistry Mirrors:\n https://registry.docker-cn.com/\n## ......\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])])},function(){var e=this.$createElement,s=this._self._c||e;return s("h2",{attrs:{id:"docker-desktop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-desktop"}},[this._v("#")]),this._v(" Docker Desktop")])},function(){var e=this.$createElement,s=this._self._c||e;return s("h3",{attrs:{id:"安装-docker-desktop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-docker-desktop"}},[this._v("#")]),this._v(" 安装 Docker Desktop")])},function(){var e=this.$createElement,s=this._self._c||e;return s("ul",[s("li",[this._v("必须使用 Windows 10 Pro ( 专业版 )")]),this._v(" "),s("li",[this._v("必须使用 64 bit 版本的 Windows")])])},function(){var e=this.$createElement,s=this._self._c||e;return s("ul",[s("li",[this._v("Mac 硬件必须为 2010 年以后的型号")]),this._v(" "),s("li",[this._v("必须使用 macOS El Capitan 10.11 及以后的版本")])])},function(){var e=this.$createElement,s=this._self._c||e;return s("h3",{attrs:{id:"启动-docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动-docker"}},[this._v("#")]),this._v(" 启动 Docker")])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/10/165c1d1fb7030b63?w=1186&h=431&f=png&s=92607",alt:""}})])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[this._v("Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入 "),s("code",[this._v("docker")]),this._v(" 命令即可。")])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[this._v("使用 "),s("code",[this._v("docker version")]),this._v(" 能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：")])},function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("λ docker version\nClient:\n## ......\n OS/Arch:  windows/amd64\n## ......\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])])},function(){var e=this.$createElement,s=this._self._c||e;return s("h2",{attrs:{id:"docker-desktop-的实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-desktop-的实现原理"}},[this._v("#")]),this._v(" Docker Desktop 的实现原理")])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?w=1374&h=517&f=png&s=51096",alt:""}})])},function(){var e=this.$createElement,s=this._self._c||e;return s("h3",{attrs:{id:"主机文件挂载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主机文件挂载"}},[this._v("#")]),this._v(" 主机文件挂载")])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?w=1491&h=832&f=png&s=97059",alt:""}})])},function(){var e=this.$createElement,s=this._self._c||e;return s("h2",{attrs:{id:"配置-docker-desktop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置-docker-desktop"}},[this._v("#")]),this._v(" 配置 Docker Desktop")])},function(){var e=this.$createElement,s=this._self._c||e;return s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/11/165c62cd575bb4e8?w=1559&h=614&f=png&s=339615",alt:""}})])},function(){var e=this.$createElement,s=this._self._c||e;return s("h4",{attrs:{id:"文件系统挂载配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件系统挂载配置"}},[this._v("#")]),this._v(" 文件系统挂载配置")])},function(){var e=this.$createElement,s=this._self._c||e;return s("h4",{attrs:{id:"资源控制配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#资源控制配置"}},[this._v("#")]),this._v(" 资源控制配置")])},function(){var e=this.$createElement,s=this._self._c||e;return s("h4",{attrs:{id:"网络配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络配置"}},[this._v("#")]),this._v(" 网络配置")])},function(){var e=this.$createElement,s=this._self._c||e;return s("h4",{attrs:{id:"docker-daemon-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-daemon-配置"}},[this._v("#")]),this._v(" docker daemon 配置")])},function(){var e=this.$createElement,s=this._self._c||e;return s("h2",{attrs:{id:"低系统版本解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#低系统版本解决方案"}},[this._v("#")]),this._v(" 低系统版本解决方案")])},function(){var e=this.$createElement,s=this._self._c||e;return s("h3",{attrs:{id:"docker-toolbox"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-toolbox"}},[this._v("#")]),this._v(" Docker Toolbox")])}],!1,null,null,null);s.default=n.exports}}]);